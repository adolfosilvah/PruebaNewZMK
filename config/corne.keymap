/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define DEFAULT_LAYER 0
#define RAISE_LAYER 1
#define LOWER_LAYER 2
#define LAYER_3 3
#define LAYER_4 4
#define LAYER_5 5

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <150>;
    bindings = <&kp>, <&kp>;

    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        Copiar {
            bindings = <&kp LC(C)>;
            key-positions = <3 2>;
        };

        Pegar {
            bindings = <&kp LC(V)>;
            key-positions = <14 15>;
        };

        PegaTex {
            bindings = <&kp LS(LC(V))>;
            key-positions = <26 27>;
        };

        Cortar {
            bindings = <&kp LC(X)>;
            key-positions = <2 3 4>;
        };

        alt-tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <14 15 16>;
        };

        Borrar-palabra {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <19 20 21>;
        };

        Soft-Off {
            bindings = <&soft_off>;
            key-positions = <0 29>;
        };

        BT-clear-all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <35 6>;
        };

        Page-Up {
            bindings = <&kp PAGE_UP>;
            key-positions = <7 8>;
            require-prior-idle-ms = <40>;
        };

        Page-Down {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <31 32>;
            require-prior-idle-ms = <40>;
        };

        Home- {
            bindings = <&kp HOME>;
            key-positions = <7 8 9>;
        };

        End- {
            bindings = <&kp END>;
            key-positions = <31 32 33>;
        };

        LeftControl {
            bindings = <&kp LCTRL>;
            key-positions = <13 14 15 16>;
        };

        Lcontrol {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <19 20 21 22>;
        };

        lefalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <1 2 3 4>;
        };

        rigalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <7 8 9 10>;
        };
    };

    behaviors {
        Ene_ene: Ene_ene {
            compatible = "zmk,behavior-tap-dance";
            label = "ENE_ENE";
            #binding-cells = <0>;
            bindings = <&kp N>, <&kp RA(N)>;
        };
    };

    macros {
        Captura: M1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(S))>;
            label = "M1";
        };

        Clave: Clave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp UP_ARROW>,
                <&macro_wait_time 500>,
                <&kp DOWN>,
                <&macro_wait_time 40>,
                <&kp LS(F) &kp A &kp B &kp I &kp A &kp N &kp DOT &kp N1 &kp N6>,
                <&macro_wait_time 500>,
                <&kp ENTER>;

            label = "CLAVE";
        };

        PantallaCompleta: PantallaCompleta {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp Z &kp R &kp M &kp M &kp RET>;
            label = "PANTALLACOMPLETA";
        };

        PantallaNormal: PantallaNormal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp Z &kp R &kp M &kp RET>;
            label = "PANTALLANORMAL";
        };

        ActualizarT: ActualizarT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp D &kp K &kp N1 &kp A>;
            label = "ACTUALIZART";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            bindings = <
&kp TAB            &kp Q  &kp W  &kp E     &kp R  &kp T               &kp Y             &kp U  &kp I      &kp O    &kp P     &kp BSPC
&mt LEFT_ALT CAPS  &kp A  &kp S  &kp D     &kp F  &kp G               &kp H             &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL          &kp Z  &kp X  &kp C     &kp V  &kp B               &Ene_ene          &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mt RIGHT_ALT DEL
                                 &kp LGUI  &mo 1  &mt LSHIFT ENTER    &mt LSHIFT SPACE  &mo 2  &mo 4
            >;
        };

        RAISE_LAYER {
            bindings = <
&kp ESC   &kp LEFT_WIN      &kp PAGE_DOWN            &kp UP_ARROW            &kp PAGE_UP        &kp DEL          &kp PLUS   &kp N7        &kp N8        &kp N9        &kp ASTRK   &kp BSPC
&kp LALT  &kp SPACE         &kp LEFT_ARROW           &kp DOWN_ARROW          &kp RIGHT          &kp BACKSPACE    &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH   &kp COLON
&trans    &kp LS(LG(LEFT))  &kp LS(LG(RIGHT_ARROW))  &kp LC(LG(LEFT_ARROW))  &kp LC(LG(RIGHT))  &kp LG(LS(S))    &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_DOT  &trans
                                                     &trans                  &trans             &trans           &trans     &trans        &trans
            >;
        };

        LOWER_LAYER {
            bindings = <
&kp ESC  &kp EXCL   &kp AT     &kp HASH           &kp DOLLAR     &kp PERCENT         &kp PLUS        &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH  &kp BSPC
&trans   &kp TILDE  &kp CARET  &kp APOS           &kp LESS_THAN  &kp GREATER_THAN    &kp MINUS       &kp EQUAL      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE       &kp SINGLE_QUOTE
&trans   &trans     &trans     &kp DOUBLE_QUOTES  &trans         &Captura            &kp UNDERSCORE  &kp ASTERISK   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SLASH      &trans
                               &trans             &trans         &trans              &trans          &trans         &trans
            >;
        };

        LAYER_3 {
            bindings = <
&kp F1   &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&kp F13  &kp F14       &kp F15       &kp F16       &kp F17       &kp F18         &tog 0  &tog 1  &tog 2  &tog 3   &tog 4   &tog 5
&trans   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans   &trans   &kp LEFT_ALT
                                     &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        LAYER_4 {
            bindings = <
&trans  &trans  &kp LC(UP)          &kp LC(PAGE_UP)    &kp LC(HOME)   &trans    &Clave  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &trans            &trans  &PantallaCompleta
&none   &none   &kp LC(DOWN_ARROW)  &kp LC(PAGE_DOWN)  &kp LC(END)    &trans    &trans  &kp C_VOL_DN     &kp C_VOLUME_UP    &kp C_PLAY_PAUSE  &trans  &PantallaNormal
&trans  &none   &none               &kp LC(LEFT)       &kp LC(RIGHT)  &none     &trans  &kp DEL          &kp C_MUTE         &trans            &trans  &trans
                                    &trans             &trans         &trans    &trans  &trans           &trans
            >;
        };

        LAYER_5 {
            bindings = <
&trans  &kp NUMBER_1      &kp NUMBER_2      &kp NUMBER_3      &kp NUMBER_4      &kp N5        &kp NUMBER_6      &kp N7      &kp N8      &kp NUMBER_9  &kp N0      &trans
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)    &kp LS(NUMBER_6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)    &kp LS(N0)  &trans
&trans  &trans            &trans            &trans            &trans            &trans        &trans            &trans      &trans      &trans        &trans      &trans
                                            &trans            &trans            &trans        &trans            &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        capa4 {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        capa5 {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
